‚úÖ What is a Member Inner Class?
A member inner class is a non-static class declared inside another class. It behaves like a member (field/method) of the outer class. You can access all the non-static members (variables and methods) of the outer class directly from the member inner class.

‚úÖ Real-life Example: Car and Engine
Think of a Car. Every car has an Engine. But an engine only makes sense in the context of a car. So, we can define Engine as a member inner class inside the Car class.

Why Use Member Inner Classes?
-When one class logically belongs to another (e.g., Engine belongs to Car).
-To encapsulate helper classes that are only used within the outer class.
-To improve code readability by grouping classes that are tightly related.


üß† Key Points:
Feature	Explanation

Access:- Can access all fields and methods of the outer class, even private ones.
Instance:- Must create an object of the outer class to create the inner class.
Use Case:- When the inner class depends on or is tied to the outer class.
Syntax:- OuterClass.InnerClass innerObj = outerObj.new InnerClass();

üí° When to Use This Syntax?
Use this when:
You're outside the outer class and want to create an object of the inner class manually.
You want more control and transparency in the way the inner class is created and used.







‚úÖ What is a Static Nested Class?
A static nested class is a class defined inside another class with the static keyword. Unlike a member inner class, it does NOT require an outer class instance to be created. It can only access static members of the outer class directly.

‚úÖ Real-life Analogy: University and Department
A Department can exist in a University, but its basic definition or structure doesn‚Äôt depend on a particular university object. So, Department can be a static nested class inside University.


üß† Key Points about Static Nested Classes:
Feature	Description

Static:- Declared with the static keyword inside another class.
Instantiation:- No outer class instance needed.
Access:- Can only access static members of the outer class directly.
Use Case:- When the nested class is more of a helper or independent unit logically grouped with the outer class.







‚úÖ What is a Local Inner Class?
A local inner class is a class defined inside a method, constructor, or block. It is not visible outside that method, and is often used when you need to encapsulate some logic temporarily, especially for small helper classes.

‚úÖ Real-life Analogy: Hospital and Admission Slip
Imagine a Hospital that prints an admission slip only when a patient is admitted. The slip doesn't exist outside that process, so it makes sense to define it as a local inner class inside the admitPatient() method.

üîç Explanation of Key Points:
-class AdmissionSlip is defined inside the admitPatient() method.
-It's not visible or usable outside this method.
-It can access variables from the enclosing method (name) ‚Äî as long as they are effectively final (not modified after being defined).
-You create and use the class inside the method, just like any other object.

üß† Why Use Local Inner Classes?
Feature	Benefit

Encapsulation:- Logic is hidden from the rest of the code.
Scope limitation:- Exists only when and where it is needed.
Clarity:- Helps logically group code that‚Äôs used in one place.



Feature	                     Member Inner Class	                                     Local Inner Class

Where it's declared	         Directly inside the outer class	                     Inside a method, constructor, or block
Scope	                     Visible throughout the outer class	                     Visible only inside the method/block it's declared in
Access to Outer Class	     Can access all members (even private) of outer class    Can access outer class members and only effectively final local variables
Can have access modifiers    ‚úÖ Yes (e.g., private, public, protected)               ‚ùå No (cannot use public/private/etc.)
Common Use Case	             When class logically belongs to outer class             When class is only needed temporarily inside a method
Object Creation	             Requires outer class instance                           Only inside the method where it's declared


‚úÖ Visual Explanation with Real-World Analogies

1. Member Inner Class
üì¶ Think of it like an Engine inside a Car ‚Äî it's a permanent, reusable component.

class Car {
    class Engine {
        void start() { }
    }
    Engine engine = new Engine(); // You can use this throughout the class
}

2. Local Inner Class
üßæ Think of it like an Admission Slip printed when a patient is admitted ‚Äî it's temporary and used just during that process.

void admitPatient() {
    class AdmissionSlip {
        void print() { }
    }
    AdmissionSlip slip = new AdmissionSlip(); // Used only here
}


‚úÖ Use When?

Use Member Inner Class when the inner class needs to be reused or accessed in multiple methods of the outer class.

Use Local Inner Class when the class is only needed for one-time use inside a method (think temporary helper logic).









‚úÖ What is an Anonymous Inner Class?
An anonymous inner class is a class without a name that is defined on-the-fly at the point of use. It‚Äôs often used to implement interfaces or extend classes without the need to create a separate named class.
-It's a one-time class for immediate use.
-It‚Äôs useful when you need to provide simple functionality on the spot without a lot of boilerplate code.


‚úÖ Real-life Analogy:
Imagine you want to quickly perform an action when a task finishes, like a one-time printing job. You don't need a whole new class for that ‚Äî just define it in the spot where you need it.


üß† Why Use Anonymous Inner Classes?
Feature	Benefit

Simplify Code:-	  You can implement interfaces or extend classes directly without defining a separate class.
Concise:-	Great for short-lived tasks where a full class declaration would be overkill.
One-time Usage:-	Ideal for code that will not be reused or extended.


‚úÖ When to Use Anonymous Inner Classes?
Event handling:- For example, in GUI applications (Swing, JavaFX), to handle button clicks, mouse movements, etc.
Functional Interfaces:- Implementing functional interfaces (Java 8's Runnable, Comparator, etc.) without needing a separate class.
One-time logic:- When you need to implement functionality in one place only.